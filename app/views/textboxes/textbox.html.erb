<!DOCTYPE html>
<html>
    <head>
        <title>Textitor</title>
        <script src="https://use.fontawesome.com/aac5c45839.js"></script>
    </head>

    <body>


        <div class="parent">
          <textarea class="docName" id="docName" rows="1"></textarea>
            <div class="btn-group" role="group">
                <button style="font-size: 12px; font-weight: bold; background-color: lightgrey;" class="btn1" id="bold" onclick="execCmd('bold');toggleShade(this);">B</button>
                <button style="font-weight: bold; font-style: italic; font-family: Times;" class="btn1" id="italics" onclick="execCmd('italic');toggleShade(this);">I</button>
                <button class="btn1" id="strikeThrough" onclick="execCmd('strikethrough');toggleShade(this);"><i class="fa fa-strikethrough"></i></button>
                <button class="btn1" id="alignLeft" onclick="execCmd('justifyleft');"><i class="fa fa-align-left"></i></button>
                <button class="btn1" id="alighnCenter" onclick="execCmd('justifycenter');"><i class="fa fa-align-center"></i></button>
                <button class="btn1" id="alignRight" onclick="execCmd('justifyright');"><i class="fa fa-align-right"></i></button>
                <button class="btn1" id="subscript" onclick="execCmd('subscript');"><i class="fa fa-subscript"></i></button>
                <button class="btn1" id="superscript" onclick="execCmd('superscript');"><i class="fa fa-superscript"></i></button>
                <button class="btn1" onclick="execCmd('insertUnorderedList');toggleShade(this);"><i class="fa fa-list-ul"></i></button>
                <button class="btn1" onclick="execCmd('insertOrderedList');toggleShade(this);"><i class="fa fa-list-ol"></i></button>

                <!-- adds an html dropdown menu, allows user to choose font size-->
                <p>Font: </p>
                <select class="select" onclick="execCommandWithArg('fontSize', this.value);">
                    <option  value ="1">8</option>
                    <option  value ="2">10</option>
                    <option  value ="3" selected="">12</option>
                    <option  value ="4">16</option>
                    <option  value ="5">20</option>
                    <option  value ="6">24</option>
                    <option  value ="7">30</option>
                </select>

                <!-- maybe a bit too complex to add a user input option here-->
                <p>Type:</p>
                <select class="select" onclick="execCommandWithArg('fontName', this.value);">
                    <option value="Arial">Arial</option>
                    <option value="Comic Sans">Comic Sans MS</option>
                    <option value="Courier">Courier</option>
                    <option value="Georgia">Georgia</option>
                    <option value="Tahoma">Tahoma</option>
                    <option value="Times New Roman">Times New Roman</option>
                    <option value="Verdana">Verdana</option>
                </select>

                <button class="btn2" id="Save" onclick="saveToLocal('plain')">Save Plain</button>
                <button class="btn2" id="Save" onclick="saveToLocal('rich')">Save Rich</button>
                <input class="btn2" type="file" id="yourFile" name="load" onchange="loadFromLocal(this.files)" accept="text/plain,text/html">

            <!-- need to restlyle the divs in this section-->
            </div>

            <iframe id="richTE"></iframe>
        </div>

        <script type="text/javascript">
            var iframe = document.getElementById("richTE").contentWindow;
            var textbox;
            var docName = document.getElementById("docName");
            docName.value = "MyDocument";

            iframe.onload = function() {
                iframe.document.designMode = "On";
                textbox = iframe.document.body;
                iframe.document.body.style.wordWrap = 'break-word';

                textbox.innerText = "";
                iframe.focus();
                logValues();
            }

            iframe.oninput = function() {
                logValues();
            }

            function toggleShade(element) {
                if (element.style.backgroundColor != "grey") element.style.backgroundColor = "grey";
                else element.style.backgroundColor = "lightgrey";
            }

            function switchShade() {

            }

            function execCmd(command) {
                iframe.document.execCommand(command, false, null);
                iframe.focus();
            }

            function execCommandWithArg(command, arg) {
                iframe.document.execCommand(command, false, arg);
                iframe.focus();
            }

            function loadFromLocal(files) {
                var file = files[0];
                if (file) {
                    var reader = new FileReader();
                    reader.readAsText(file, "UTF-8");
                    reader.onload = function (evt) {
                        if (file.type === "text/plain") textbox.innerText = evt.target.result;
                        else if (file.type === "text/html") textbox.innerHTML = evt.target.result;
                        else alert("Wrong file format");
                        console.log(file);
                    }
                    reader.onerror = function (evt) {
                        alert("Error loading file");
                    }
                }
            }

            function saveToLocal(textType) {
                var text = "";
                var fileName = docName.value;
                if (textType === "plain") {
                    fileName = fileName + ".txt";
                    text = textbox.innerText;
                } else {
                    fileName = fileName + ".rtx";
                    text = textbox.innerHTML;
                }

                var downloadLink = document.createElement("a");
                downloadLink.download = fileName;
                downloadLink.innerHTML = "Download File";
                downloadLink.href = window.URL.createObjectURL(new Blob([text], {type:"text/plain"}));
                downloadLink.onclick = destroyClickedElement;
                downloadLink.style.display = "none";
                document.body.appendChild(downloadLink);

                function destroyClickedElement(event) {
                    document.body.removeChild(event.target);
                }

                downloadLink.click();
            }



            function saveToDatabase() {

            }

            function loadFromDatabase() {

            }

            function logValues() {
                console.log({"text": textbox.innerText, "html": textbox.innerHTML});
            }
        </script>
    </body>
</html>
