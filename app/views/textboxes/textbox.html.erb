<!DOCTYPE html>
<html>
    <head>
        <title>Textitor</title>
    </head>

    <body>
          <div class="parent">
            <div class="btn-group" role="group">

                <button class="btn1" id="bold" onclick="styleEvent(styles.bold)"><i class="fas fa-bold"></i></button>
                <button class="btn1" id="italics" onclick="styleEvent(styles.italics)"><i class="fas fa-italic"></i></button>
                <button class="btn1" id="strikeThrough" onclick=""><i class="fas fa-strikethrough"></i></button>
                <button class="btn1" id="alignLeft" onclick=""><i class="fas fa-align-left"></i></button>
                <button class="btn1" id="alighnCenter" onclick=""><i class="fas fa-align-center"></i></button>
                <button class="btn1" id="alignRight" onclick=""><i class="fas fa-align-right"></i></button>

              <!-- adds an html dropdown menu, need to add jscript to allow user to choose font size-->
                <select id = "font">
                  <option class="non" value ="8">8</option>
                  <option class="non" value ="9">9</option>
                  <option class="non" value ="10">10</option>
                  <option class="non" value ="11">11</option>
                  <option class="non" value ="12">12</option>
                  <option class="editable" value ="other">other</option>
                </select>
              <!-- maybe a bit too complex to add a user input option here-->
                <select id = "style">
                  <option class="non" value ="Times New Roman">Times New Roman</option>
                  <option class="non" value ="Courier">Courier</option>
                  <option class="non" value ="Georgia">Georgia</option>
                  <option class="non" value ="Arial">Arial</option>
                  <option class="non" value ="Calibri">Calibri</option>
                </select>
                <!-- getting odd format issues when using standard html button--->
                <button class="btn1" id="Save" onclick="">Save</button>
                <button class="btn1" id="Load" onclick="">Load</button>


            </div>


                <textarea id="textbox" name="textbox" placeholder="box" value="" autofocus="true" style="font-family: courier; font-size: 14px; line-height: normal;"></textarea>
                <iframe id="display" name="display"></iframe>
          </div>

          <script>
              var textbox = document.getElementById('textbox');
              var states = [];
              var currentState = new State(0, 0);
              var richText = "";
              var oldSelectionStart = 0;
              var oldSelectionEnd = 0;
              var lastTextLength = 0;
              var key;

              // kinda like an enumeration for styles
              var styles = {
                  bold: {startTag: "<b>", endTag: "</b>", id: "bold"},
                  italics: {startTag: "<i>", endTag: "</i>", id: "italics"}
              };

              function State(startIndex, endIndex) {
                  this.startIndex = startIndex;
                  this.endIndex = endIndex;
                  this.startTag = "<p>";
                  this.endTag = "</p>";
                  this.plainText = textbox.value.substring(startIndex, endIndex);
                  this.richText = this.startTag + this.plainText + this.endTag;

                  this.addStyle = function(styleType) {
                      this.startTag = this.startTag + styleType.startTag;
                      this.endTag = styleType.endTag + this.endTag;
                  }

                  this.removeStyle = function(styleType) {
                      this.startTag = this.startTag.replaceAll(styleType.startTag, "");
                      this.endTag = this.endTag.replaceAll(styleType.endTag, "");
                  }

                  this.setButtons = function() {
                      if (this.startTag.includes(styles.bold.startTag)) {
                          document.getElementById('bold').style.background = "gray"; //temporary
                      } else {
                          document.getElementById('bold').style.background = "lightgray"; //temporary
                      }
                  }
              }

              window.onload = function() {
                  window.frames['display'].document.head.innerHTML = "<style type='text/css'> * {font-family: courier; font-size: 14px; margin: 0px; padding: 0px; line-height: normal; word-wrap: break-word;} p{display: inline;} </style>";

                  // add load code here // if (docLoaded) currentState = getCursorState... else
                  document.getElementById('textbox').value = ""; //sets the value of the textbox to nothing on page load
              }

              textbox.onkeydown = function(e) {
                  key = e;
                  oldSelectionStart = textbox.selectionStart;
                  oldSelectionEnd = textbox.selectionEnd;
                  lastTextLength = textbox.value.length;
              }

              textbox.oninput = function() { // as soon as value of textbox changes
                  updateStates();
                  encode();
                  renderDisplay();
              }

              textbox.onkeyup = function() {
                  currentState = getCursorState(textbox.selectionStart); // FIXME: seemes to be a problem here. not assigning proporly
                  currentState.setButtons();
              }

              textbox.onmousedown = function() {
                  oldSelectionStart = textbox.selectionStart;
                  oldSelectionEnd = textbox.selectionEnd;
              }

              textbox.onclick = function() { // when click is released
                  currentState = getCursorState(textbox.selectionStart); // FIXME: seemes to be a problem here. not assigning proporly
                  currentState.setButtons();
              }

              function updateStates() {
                  if (currentState.plainText.length === 0) {
                      console.log("pushed");
                      states.push(currentState); //FIXME states need to be inserted in order
                  }

                  //currentState.endIndex += -(oldSelectionEnd - oldSelectionStart) + (textbox.selectionStart - oldSelectionStart);
                  currentState.endIndex += textbox.value.length - lastTextLength; // FIXME: do this for all states effected

                  for (var i = 0; i < states.length; i++) { // fixme: only for states effected
                      if (states[i].endIndex <= states[i].startIndex) {
                          states[i].plainText = ""; // so that i can push states based on their plain text
                          states.splice(i, 1);
                      }
                  }
              }

              function encode() {
                  richText = "";
                  for (var i = 0; i < states.length; i++) {
                      states[i].plainText = textbox.value.substring(states[i].startIndex, states[i].endIndex); // sets the plain text for this state
                      states[i].richText = states[i].plainText.replaceAll("\n", "<br>"); // adds newlines in richtext
                      states[i].richText = states[i].startTag + states[i].richText + states[i].endTag; // adds the start and end tags to rich text
                      richText += states[i].richText;
                      console.log(states[i]);
                  }
              }

              function renderDisplay() {
                  window.frames['display'].document.body.innerHTML = richText;
                  console.log(richText);
              }

              function getCursorState(cursorIndex) { //DELETEME
                  if (cursorIndex === 0) { // handles cursor at index 0
                      if (states.length === 0) {
                          return currentState; // for empty textbox, should be the last state at states[0] or initial currentState
                      } else {
                          return states[0]; // when cursor is at beginning of text
                      }
                  } else {
                      for (var i = 0; i < states.length; i++) {
                          if (cursorIndex > states[i].startIndex && cursorIndex <= states[i].endIndex) {
                              if (currentState !== states[i] && textbox.selectionStart === oldSelectionStart) {
                                  return currentState; // FIXME: currentState !== states[i]             currentState.plainText === 0         !states.includes(currentState)
                              } else {
                                  return states[i]; // return the state at the cursor if no changes were made
                              }
                          } // end of if
                      } // end of for
                  } // end of else
                  // console.log("shit!! check getCursorState()");
              } // end of method

              // returns the state that the cursor is in
              function getCursorStateIndex() {
                  for (var i = 0; i < states.length; i++) {
                      if (textbox.selectionStart > states[i].startIndex && textbox.selectionStart <= states[i].endIndex) return i;
                  }
                  return -1;
              }

              // return the index of a given state from states[]
              function getStateIndex(myState) {

              }

              function styleEvent(styleType) {
                  changeCurrentState(styleType);
              }

              function changeCurrentState(styleType) {
                  var oldState = currentState;
                  currentState = new State(textbox.selectionStart, textbox.selectionStart);
                  currentState.startTag = oldState.startTag;
                  currentState.endTag = oldState.endTag;
                  if (currentState.startTag.includes(styleType.startTag)) {
                      currentState.removeStyle(styleType);
                  } else {
                      currentState.addStyle(styleType);
                  }
                  currentState.setButtons();
              }

              // inserts a string into another string based on an index
              String.prototype.insert = function insert(index, string) {
                  if (index > 0) {
                      if (index < this.length) return this.substring(0, index) + string + this.substring(index, this.length);
                      else return this + string;
                  } else return string + this;
              };

              // removes the first occurance of a substring
              String.prototype.replaceAll = function replaceAll(oldSubstring, newSubstring) {
                  var regex = new RegExp(oldSubstring, "g");
                  return this.replace(regex, newSubstring);
              }

          </script>

      </body>
  </html>
